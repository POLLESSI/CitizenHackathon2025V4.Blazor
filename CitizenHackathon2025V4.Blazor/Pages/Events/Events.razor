@page "/events"
@using CitizenHackathon2025V4.Blazor.Client.Models
@using CitizenHackathon2025V4.Blazor.Client.Pages.GenericEntities
@using CitizenHackathon2025V4.Blazor.Client.Shared.Suggestion
@inject IJSRuntime JS
@inject OutZenSignalRService SignalRService
@inject EventService EventService

<h3>List of events</h3>

<GenericEntityList TModel="EventModel"
                   Hub="/hubs/eventhub"
                   Event="notifyNewEvent"
                   LoadFunc="@LoadEventsAsync" />

@if (Suggestions?.Any() == true)
{
    <p>@Suggestions.Count() suggestions nearby</p>
    <button class="btn btn-primary" @onclick="ShowOnMap">See on map</button>
    <div class="detail-container">
        <p>Info on suggestion</p>
    </div>

    <div class="card">Statistics</div>

    <button class="btn">Send</button>
    <div class="ultra-luxe">
        <Event /> 
    </div>
}

@code {
    [Parameter] public IEnumerable<SuggestionDTO> Suggestions { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnCrowdInfoUpdated += HandleCrowdUpdate;
        await SignalRService.StartAsync();
    }

    private void HandleCrowdUpdate(CrowdInfoUIDTO data)
    {
        Console.WriteLine($"📡 CrowdInfo received : {data.PlaceName} ({data.CrowdLevel})");
    }

    private async Task<List<EventModel>> LoadEventsAsync()
    {
        var result = await EventService.GetLatestEventAsync();
        return result.ToList();
    }

    private async Task ShowOnMap()
    {
        await JS.InvokeVoidAsync("showSuggestionsOnMap", Suggestions);
    }

    public void Dispose()
    {
        SignalRService.OnCrowdInfoUpdated -= HandleCrowdUpdate;
    }
}